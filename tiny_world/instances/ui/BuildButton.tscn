[gd_scene load_steps=7 format=2]

[ext_resource path="res://assets/graphics/icons/build.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends TextureButton

enum ACTION {
	BUILD_HOUSING, BUILD_PRODUCTION, BUILD_RESEARCH, DESTROY
}

var TextButton = preload(\"res://instances/ui/TextButton.tscn\")

var actionDict = {
	ACTION.BUILD_HOUSING: Action.new([BuildingNodeFactory.TYPE.PASTURE], \"Build Housing\", \"_on_build_housing\"),
	ACTION.BUILD_PRODUCTION: Action.new([BuildingNodeFactory.TYPE.PASTURE], \"Build Production\", \"_on_build_production\"),
	ACTION.BUILD_RESEARCH: Action.new([BuildingNodeFactory.TYPE.PASTURE], \"Build Research\", \"_on_build_research\"),
	ACTION.DESTROY: Action.new([BuildingNodeFactory.TYPE.HOUSING, BuildingNodeFactory.TYPE.PRODUCTION, BuildingNodeFactory.TYPE.RESEARCH], \"Destroy Building\", \"_on_building_destroy\"),
}
	
var hoverSpeed:float = 0.5
var offset:Vector2 = Vector2.ONE * -32

var hovered = false
var active = false setget setActive
var hoverColor:Color = Color.white
var idleColor:Color = Color(1, 1, 1, 0.2)

var parent:BuildingNodeFactory.BuildingNode

func init(_parent:BuildingNodeFactory.BuildingNode):
	self.parent = _parent
	_parent.connect(\"tree_exiting\", self, \"call_deferred\", [\"queue_free\"])
	reinit()

func reinit():
	for child in $MainActions.get_children():
		child.call_deferred(\"queue_free\")
	for action in actionDict.values():
		if action.types.find(self.parent.type) >= 0:
			var _button = TextButton.instance()
			_button.setText(action.label)
			$MainActions.add_child(_button)
			action.registerButton(_button)
			_button.connect(\"pressed\", self, action.function)

func setActive(_active):
	if !GameState.paused or active:
		active = !active
		if active:
			GameState.pause()
			$MainActions.visible = true
		else:
			GameState.unpause()
			$MainActions.visible = false
			$BuildingActions.visible = false
			$BuildingActions/HousingOptions.visible = false
			$BuildingActions/ProductionOptions.visible = false
			$BuildingActions/ResearchOptions.visible = false
			if !hovered:
				_on_mouse_exit()

func _ready():
	self.connect(\"mouse_entered\", self, \"_on_mouse_enter\")
	self.connect(\"mouse_exited\", self, \"_on_mouse_exit\")
	self.connect(\"pressed\", self, \"_on_press\")
	$BuildingActions/HousingOptions.connect(\"build\", self, \"_on_build\")
	$BuildingActions/ProductionOptions.connect(\"build\", self, \"_on_build\")
	$BuildingActions/ResearchOptions.connect(\"build\", self, \"_on_build\")
	self.modulate = idleColor

func _process(_delta):
	if is_instance_valid(parent):
		self.set_position(parent.getBuildButtonPosition() + offset)
	if active and Input.is_action_just_pressed(\"ui_mouse_right\"):
		setActive(false)
	if GameState.paused && !active:
		visible = false
	else:
		visible = true

func _on_press():
	setActive(!active)

func _on_build(type, id):
	var _cost = GameState.getBuildingCost(type, id)
	if _cost <= GameState.resources.getMaterials():
		GameState.resources.changeMaterials(-1 * _cost)
		self.parent.changeBuilding(id, type, GameState.buildingNodeFactory.getBuildingData(type, id))
		reinit()
	setActive(false)
	
func _on_building_destroy():
	self.parent.changeBuilding(BuildingNodeFactory.PASTURE.WOODS, BuildingNodeFactory.TYPE.PASTURE, GameState.buildingNodeFactory.getBuildingData(BuildingNodeFactory.TYPE.PASTURE, BuildingNodeFactory.PASTURE.WOODS))
	reinit()
	setActive(false)

func _on_mouse_enter():
	hovered = true
	$Tween.remove_all()
	$Tween.interpolate_property(self, \"modulate\", self.modulate, hoverColor, hoverSpeed, Tween.TRANS_SINE)
	$Tween.start()
	
func _on_mouse_exit():
	hovered = false
	if !active:
		$Tween.remove_all()
		$Tween.interpolate_property(self, \"modulate\", self.modulate, idleColor, hoverSpeed, Tween.TRANS_SINE)
		$Tween.start()
		
func _on_build_housing():
	$MainActions.visible = false
	$BuildingActions.visible = true
	$BuildingActions/HousingOptions.visible = true
	
func _on_build_research():
	$MainActions.visible = false
	$BuildingActions.visible = true
	$BuildingActions/ResearchOptions.visible = true

func _on_build_production():
	$MainActions.visible = false
	$BuildingActions.visible = true
	$BuildingActions/ProductionOptions.visible = true

class Action:
	var types:Array = []
	var label:String = \"\"
	var function:String = \"\"
	var button:TextureButton
	
	func _init(_types:Array, _label:String, _function:String):
		types = _types
		label = _label
		function = _function
		
	func registerButton(_button):
		button = _button
"

[sub_resource type="StyleBoxFlat" id=2]
bg_color = Color( 0, 0, 0, 0.588235 )
corner_radius_top_left = 64
corner_radius_top_right = 64
corner_radius_bottom_right = 64
corner_radius_bottom_left = 64

[sub_resource type="GDScript" id=3]
script/source = "extends VBoxContainer

signal build(type, id)

var TextButton = preload(\"res://instances/ui/TextButton.tscn\")

func _ready():
	self.connect(\"visibility_changed\", self, \"_on_visibility_changed\")

func _on_build(id):
	emit_signal(\"build\", BuildingNodeFactory.TYPE.HOUSING, id)

func _on_hover(id):
	UIRouter.emit_signal(\"building_hovered\", id, BuildingNodeFactory.TYPE.HOUSING)

func _on_unhover(id):
	UIRouter.emit_signal(\"building_unhovered\", id, BuildingNodeFactory.TYPE.HOUSING)

func _on_visibility_changed():
	if !visible:
		_on_unhover(0)
	if visible:
		for child in get_children():
			child.call_deferred(\"queue_free\")
		if GameState.hasSkill(Progress.SKILLS.CAMP):
			var _button = TextButton.instance()
			_button.setText(\"Camp (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.HOUSING, BuildingNodeFactory.HOUSING.CAMP)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.HOUSING.CAMP])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.HOUSING.CAMP])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.HOUSING.CAMP])
		if GameState.hasSkill(Progress.SKILLS.VILLAGE):
			var _button = TextButton.instance()
			_button.setText(\"Village (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.HOUSING, BuildingNodeFactory.HOUSING.VILLAGE)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.HOUSING.VILLAGE])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.HOUSING.VILLAGE])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.HOUSING.VILLAGE])
		if GameState.hasSkill(Progress.SKILLS.TOWN):
			var _button = TextButton.instance()
			_button.setText(\"Village (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.HOUSING, BuildingNodeFactory.HOUSING.TOWN)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.HOUSING.TOWN])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.HOUSING.TOWN])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.HOUSING.TOWN])
		if GameState.hasSkill(Progress.SKILLS.CITY):
			var _button = TextButton.instance()
			_button.setText(\"City (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.HOUSING, BuildingNodeFactory.HOUSING.CITY)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.HOUSING.CITY])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.HOUSING.CITY])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.HOUSING.CITY])
		if GameState.hasSkill(Progress.SKILLS.METROPOLIS):
			var _button = TextButton.instance()
			_button.setText(\"Metropolis (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.HOUSING, BuildingNodeFactory.HOUSING.METROPOLIS)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.HOUSING.METROPOLIS])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.HOUSING.METROPOLIS])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.HOUSING.METROPOLIS])
	
"

[sub_resource type="GDScript" id=4]
script/source = "extends VBoxContainer

signal build(type, id)

var TextButton = preload(\"res://instances/ui/TextButton.tscn\")

func _ready():
	self.connect(\"visibility_changed\", self, \"_on_visibility_changed\")

func _on_build(id):
	emit_signal(\"build\", BuildingNodeFactory.TYPE.PRODUCTION, id)
	
func _on_hover(id):
	UIRouter.emit_signal(\"building_hovered\", id, BuildingNodeFactory.TYPE.PRODUCTION)

func _on_unhover(id):
	UIRouter.emit_signal(\"building_unhovered\", id, BuildingNodeFactory.TYPE.PRODUCTION)

func _on_visibility_changed():
	if !visible:
		_on_unhover(0)
	if visible:
		for child in get_children():
			child.call_deferred(\"queue_free\")
		if GameState.hasSkill(Progress.SKILLS.LUMBERYARD):
			var _button = TextButton.instance()
			_button.setText(\"Lumberyard (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.PRODUCTION, BuildingNodeFactory.PRODUCTION.LUMBERYARD)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.PRODUCTION.LUMBERYARD])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.PRODUCTION.LUMBERYARD])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.PRODUCTION.LUMBERYARD])
		if GameState.hasSkill(Progress.SKILLS.MINE):
			var _button = TextButton.instance()
			_button.setText(\"Mine (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.PRODUCTION, BuildingNodeFactory.PRODUCTION.MINE)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.PRODUCTION.MINE])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.PRODUCTION.MINE])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.PRODUCTION.MINE])
		if GameState.hasSkill(Progress.SKILLS.REFINERY):
			var _button = TextButton.instance()
			_button.setText(\"Refinery (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.PRODUCTION, BuildingNodeFactory.PRODUCTION.REFINERY)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.PRODUCTION.REFINERY])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.PRODUCTION.REFINERY])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.PRODUCTION.REFINERY])
		if GameState.hasSkill(Progress.SKILLS.FACTORY):
			var _button = TextButton.instance()
			_button.setText(\"Factory (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.PRODUCTION, BuildingNodeFactory.PRODUCTION.FACTORY)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.PRODUCTION.FACTORY])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.PRODUCTION.FACTORY])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.PRODUCTION.FACTORY])
		if GameState.hasSkill(Progress.SKILLS.PRODUCTIONPLANT):
			var _button = TextButton.instance()
			_button.setText(\"Production Plant (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.PRODUCTION, BuildingNodeFactory.PRODUCTION.PRODUCTIONPLANT)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.PRODUCTION.PRODUCTIONPLANT])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.PRODUCTION.PRODUCTIONPLANT])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.PRODUCTION.PRODUCTIONPLANT])
"

[sub_resource type="GDScript" id=5]
script/source = "extends VBoxContainer

signal build(type, id)

var TextButton = preload(\"res://instances/ui/TextButton.tscn\")

func _ready():
	self.connect(\"visibility_changed\", self, \"_on_visibility_changed\")

func _on_build(id):
	emit_signal(\"build\", BuildingNodeFactory.TYPE.RESEARCH, id)
	
func _on_hover(id):
	UIRouter.emit_signal(\"building_hovered\", id, BuildingNodeFactory.TYPE.RESEARCH)

func _on_unhover(id):
	UIRouter.emit_signal(\"building_unhovered\", id, BuildingNodeFactory.TYPE.RESEARCH)

func _on_visibility_changed():
	if !visible:
		_on_unhover(0)
	if visible:
		for child in get_children():
			child.call_deferred(\"queue_free\")
		if GameState.hasSkill(Progress.SKILLS.SCHOOL):
			var _button = TextButton.instance()
			_button.setText(\"School (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.RESEARCH, BuildingNodeFactory.RESEARCH.SCHOOL)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.RESEARCH.SCHOOL])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.RESEARCH.SCHOOL])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.RESEARCH.SCHOOL])
		if GameState.hasSkill(Progress.SKILLS.MUSEUM):
			var _button = TextButton.instance()
			_button.setText(\"Museum (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.RESEARCH, BuildingNodeFactory.RESEARCH.MUSEUM)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.RESEARCH.MUSEUM])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.RESEARCH.MUSEUM])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.RESEARCH.MUSEUM])
		if GameState.hasSkill(Progress.SKILLS.LIBRARY):
			var _button = TextButton.instance()
			_button.setText(\"Library (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.RESEARCH, BuildingNodeFactory.RESEARCH.LIBRARY)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.RESEARCH.LIBRARY])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.RESEARCH.LIBRARY])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.RESEARCH.LIBRARY])
		if GameState.hasSkill(Progress.SKILLS.COLLEGE):
			var _button = TextButton.instance()
			_button.setText(\"College (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.RESEARCH, BuildingNodeFactory.RESEARCH.COLLEGE)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.RESEARCH.COLLEGE])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.RESEARCH.COLLEGE])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.RESEARCH.COLLEGE])
		if GameState.hasSkill(Progress.SKILLS.UNIVERSITY):
			var _button = TextButton.instance()
			_button.setText(\"University (Cost: \" + str(GameState.getBuildingCost(BuildingNodeFactory.TYPE.RESEARCH, BuildingNodeFactory.RESEARCH.UNIVERSITY)) + \")\")
			add_child(_button)
			_button.connect(\"pressed\", self, \"_on_build\", [BuildingNodeFactory.RESEARCH.UNIVERSITY])
			_button.connect(\"mouse_entered\", self, \"_on_hover\", [BuildingNodeFactory.RESEARCH.UNIVERSITY])
			_button.connect(\"mouse_exited\", self, \"_on_unhover\", [BuildingNodeFactory.RESEARCH.UNIVERSITY])
"

[node name="BuildButton" type="TextureButton"]
margin_left = -32.0
margin_top = -32.0
margin_right = 32.0
margin_bottom = 32.0
rect_min_size = Vector2( 64, 64 )
mouse_default_cursor_shape = 2
expand = true
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="."]

[node name="Panel" type="Panel" parent="."]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 1
custom_styles/panel = SubResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="Panel"]
self_modulate = Color( 0.992157, 0.992157, 0.992157, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 2.82517
margin_right = -4.0
margin_bottom = -5.17483
texture = ExtResource( 1 )
expand = true
stretch_mode = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MainActions" type="VBoxContainer" parent="."]
visible = false
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = 8.0
margin_top = -128.0
margin_bottom = 128.0
rect_min_size = Vector2( 256, 256 )
custom_constants/separation = 8
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BuildingActions" type="Control" parent="."]
visible = false
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = 4.0
margin_top = -160.0
margin_right = 324.0
margin_bottom = 160.0
mouse_filter = 1

[node name="HousingOptions" type="VBoxContainer" parent="BuildingActions"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
alignment = 1
script = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ProductionOptions" type="VBoxContainer" parent="BuildingActions"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
alignment = 1
script = SubResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ResearchOptions" type="VBoxContainer" parent="BuildingActions"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
alignment = 1
script = SubResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}
